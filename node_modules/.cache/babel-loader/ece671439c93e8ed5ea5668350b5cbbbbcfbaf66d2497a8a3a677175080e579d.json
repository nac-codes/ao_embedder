{"ast":null,"code":"var _jsxFileName = \"/Users/chim/arweave_website_proto/ao_embedder_proto/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// import generateEmbeddings from './generateEmbeddings';\n// import * as tf from '@tensorflow/tfjs';\n// import * as use from '@tensorflow-models/universal-sentence-encoder';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n  const [messageResponse, setMessageResponse] = useState(null); // To store the response from sendMessage\n  const [resultOutput, setResultOutput] = useState(null); // To store the result of fetching the result\n  // const [textInput, setTextInput] = useState(''); // State to store text input\n  // const [embeddingsOutput, setEmbeddingsOutput] = useState(null); \n\n  useEffect(() => {\n    // Check if ArConnect is available in the window context\n    setIsArConnectAvailable(!!window.arweaveWallet);\n  }, []);\n  const connectToArConnect = async () => {\n    try {\n      // Requesting permissions from ArConnect; adjust permissions as needed\n      await window.arweaveWallet.connect(['ACCESS_ADDRESS', 'SIGN_TRANSACTION']);\n      console.log('Connected to ArConnect.');\n    } catch (error) {\n      console.error('Error connecting to ArConnect:', error);\n    }\n  };\n  const sendMessage = async () => {\n    if (!isArConnectAvailable) {\n      alert('Please install ArConnect.');\n      return;\n    }\n    try {\n      const response = await message({\n        process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n        tags: [{\n          name: \"Your-Tag-Name-Here\",\n          value: \"your-tag-value\"\n        }\n        // Additional tags as needed\n        ],\n        signer: createDataItemSigner(window.arweaveWallet),\n        data: \"ping\" // The message data you want to send\n      });\n      console.log(\"Message response:\", response);\n      setMessageResponse(response); // Store the response for displaying\n      fetchResult(response); // Assuming the response contains an id, use it to fetch results\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  const fetchResult = async messageId => {\n    try {\n      let {\n        Messages,\n        Spawns,\n        Output,\n        Error\n      } = await result({\n        message: messageId,\n        // Use the messageId from sendMessage response\n        process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\"\n      });\n      console.log(\"Result data:\", {\n        Messages,\n        Spawns,\n        Output,\n        Error\n      });\n      setResultOutput(Messages[0].Data); // Store the result data for displaying\n    } catch (error) {\n      console.error(\"Error fetching result:\", error);\n    }\n  };\n\n  // Function to handle text input changes\n  // const handleTextInputChange = (event) => {\n  //     setTextInput(event.target.value);\n  // };\n\n  // // Function to convert text to embeddings and set the output\n  // const convertTextToEmbeddings = async () => {\n  //     const model = await use.load();\n  //     const embeddings = await model.embed([textInput]);\n  //     const embeddingsArray = await embeddings.array();\n  //     const embeddingsJSON = JSON.stringify(embeddingsArray);\n  //     setEmbeddingsOutput(embeddingsJSON);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isArConnectAvailable && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please install ArConnect to use this app.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 37\n    }, this), isArConnectAvailable && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectToArConnect,\n        children: \"Connect to ArConnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }, this), messageResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Message Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(messageResponse, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 39\n      }, this), resultOutput && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Result Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(resultOutput, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"PMnYFtLxTcvrHi6kXBLUT1ahtic=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","message","result","createDataItemSigner","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isArConnectAvailable","setIsArConnectAvailable","messageResponse","setMessageResponse","resultOutput","setResultOutput","window","arweaveWallet","connectToArConnect","connect","console","log","error","sendMessage","alert","response","process","tags","name","value","signer","data","fetchResult","messageId","Messages","Spawns","Output","Error","Data","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/chim/arweave_website_proto/ao_embedder_proto/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// import generateEmbeddings from './generateEmbeddings';\n// import * as tf from '@tensorflow/tfjs';\n// import * as use from '@tensorflow-models/universal-sentence-encoder';\n\nfunction App() {\n    const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n    const [messageResponse, setMessageResponse] = useState(null); // To store the response from sendMessage\n    const [resultOutput, setResultOutput] = useState(null); // To store the result of fetching the result\n    // const [textInput, setTextInput] = useState(''); // State to store text input\n    // const [embeddingsOutput, setEmbeddingsOutput] = useState(null); \n\n    \n    useEffect(() => {\n        // Check if ArConnect is available in the window context\n        setIsArConnectAvailable(!!window.arweaveWallet);\n    }, []);\n\n    const connectToArConnect = async () => {\n        try {\n            // Requesting permissions from ArConnect; adjust permissions as needed\n            await window.arweaveWallet.connect(['ACCESS_ADDRESS', 'SIGN_TRANSACTION']);\n            console.log('Connected to ArConnect.');\n        } catch (error) {\n            console.error('Error connecting to ArConnect:', error);\n        }\n    };\n\n    const sendMessage = async () => {\n        if (!isArConnectAvailable) {\n            alert('Please install ArConnect.');\n            return;\n        }\n\n        try {\n            const response = await message({\n                process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n                tags: [\n                    { name: \"Your-Tag-Name-Here\", value: \"your-tag-value\" },\n                    // Additional tags as needed\n                ],\n                signer: createDataItemSigner(window.arweaveWallet),\n                data: \"ping\", // The message data you want to send\n            });\n\n            console.log(\"Message response:\", response);\n            setMessageResponse(response); // Store the response for displaying\n            fetchResult(response); // Assuming the response contains an id, use it to fetch results\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n        }\n    };\n\n    const fetchResult = async (messageId) => {\n        try {\n          let { Messages, Spawns, Output, Error } = await result({\n              message: messageId, // Use the messageId from sendMessage response\n              process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n          });\n            console.log(\"Result data:\", { Messages, Spawns, Output, Error });\n            setResultOutput(Messages[0].Data); // Store the result data for displaying\n        } catch (error) {\n            console.error(\"Error fetching result:\", error);\n        }\n    };\n\n    // Function to handle text input changes\n    // const handleTextInputChange = (event) => {\n    //     setTextInput(event.target.value);\n    // };\n\n    // // Function to convert text to embeddings and set the output\n    // const convertTextToEmbeddings = async () => {\n    //     const model = await use.load();\n    //     const embeddings = await model.embed([textInput]);\n    //     const embeddingsArray = await embeddings.array();\n    //     const embeddingsJSON = JSON.stringify(embeddingsArray);\n    //     setEmbeddingsOutput(embeddingsJSON);\n    // };\n\n    return (\n      <div>\n          {!isArConnectAvailable && <p>Please install ArConnect to use this app.</p>}\n          {isArConnectAvailable && (\n              <>\n                  <button onClick={connectToArConnect}>Connect to ArConnect</button>\n                  <button onClick={sendMessage}>Send Message</button>\n                  {/* <input type=\"text\" value={textInput} onChange={handleTextInputChange} placeholder=\"Enter text here\" /> */}\n                  {/* <button onClick={convertTextToEmbeddings}>Convert Text to Embeddings</button> */}\n                  {messageResponse && <div>\n                      <h2>Message Response:</h2>\n                      <pre>{JSON.stringify(messageResponse, null, 2)}</pre>\n                  </div>}\n                  {resultOutput && <div>\n                      <h2>Result Output:</h2>\n                      <pre>{JSON.stringify(resultOutput, null, 2)}</pre>\n                  </div>}\n                  {/* {embeddingsOutput && <div>\n                      <h2>Embeddings Output:</h2>\n                      <pre>{embeddingsOutput}</pre>\n                  </div>} */}\n              </>\n          )}\n      </div>\n    );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}