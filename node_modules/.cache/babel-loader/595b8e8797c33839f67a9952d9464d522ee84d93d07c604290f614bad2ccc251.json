{"ast":null,"code":"var _jsxFileName = \"/Users/chim/arweave_website_proto/ao_embedder_proto/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// // import generateEmbeddings from './generateEmbeddings';\n// // import * as tf from '@tensorflow/tfjs';\n// // import * as use from '@tensorflow-models/universal-sentence-encoder';\n\n// function App() {\n//     const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n//     const [messageResponse, setMessageResponse] = useState(null); // To store the response from sendMessage\n//     const [resultOutput, setResultOutput] = useState(null); // To store the result of fetching the result\n//     // const [textInput, setTextInput] = useState(''); // State to store text input\n//     // const [embeddingsOutput, setEmbeddingsOutput] = useState(null); \n\n//     useEffect(() => {\n//         // Check if ArConnect is available in the window context\n//         setIsArConnectAvailable(!!window.arweaveWallet);\n//     }, []);\n\n//     const connectToArConnect = async () => {\n//         try {\n//             // Requesting permissions from ArConnect; adjust permissions as needed\n//             await window.arweaveWallet.connect(['ACCESS_ADDRESS', 'SIGN_TRANSACTION']);\n//             console.log('Connected to ArConnect.');\n//         } catch (error) {\n//             console.error('Error connecting to ArConnect:', error);\n//         }\n//     };\n\n//     const sendMessage = async () => {\n//         if (!isArConnectAvailable) {\n//             alert('Please install ArConnect.');\n//             return;\n//         }\n\n//         try {\n//             const response = await message({\n//                 process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n//                 tags: [\n//                     { name: \"Action\", value: \"GetEmbedding_Proto\" },\n//                     { name: \"Input\", value: \"difficult feature overall. joining communities. leadership values.\"}\n//                     // Additional tags as needed\n//                 ],\n//                 signer: createDataItemSigner(window.arweaveWallet)\n//             });\n\n//             console.log(\"Message response:\", response);\n//             setMessageResponse(response); // Store the response for displaying\n//             fetchResult(response); // Assuming the response contains an id, use it to fetch results\n//         } catch (error) {\n//             console.error(\"Error sending message:\", error);\n//         }\n//     };\n\n//     const fetchResult = async (messageId) => {\n//         try {\n//           let { Messages, Spawns, Output, Error } = await result({\n//               message: messageId, // Use the messageId from sendMessage response\n//               process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n//           });\n//             console.log(\"Result data:\", { Messages, Spawns, Output, Error });\n//             setResultOutput(Messages[0].Data); // Store the result data for displaying\n//         } catch (error) {\n//             console.error(\"Error fetching result:\", error);\n//         }\n//     };\n\n//     // Function to handle text input changes\n//     // const handleTextInputChange = (event) => {\n//     //     setTextInput(event.target.value);\n//     // };\n\n//     // // Function to convert text to embeddings and set the output\n//     // const convertTextToEmbeddings = async () => {\n//     //     const model = await use.load();\n//     //     const embeddings = await model.embed([textInput]);\n//     //     const embeddingsArray = await embeddings.array();\n//     //     const embeddingsJSON = JSON.stringify(embeddingsArray);\n//     //     setEmbeddingsOutput(embeddingsJSON);\n//     // };\n\n//     return (\n//       <div>\n//           {!isArConnectAvailable && <p>Please install ArConnect to use this app.</p>}\n//           {isArConnectAvailable && (\n//               <>\n//                   <button onClick={connectToArConnect}>Connect to ArConnect</button>\n//                   <button onClick={sendMessage}>Send Message</button>\n//                   {/* <input type=\"text\" value={textInput} onChange={handleTextInputChange} placeholder=\"Enter text here\" /> */}\n//                   {/* <button onClick={convertTextToEmbeddings}>Convert Text to Embeddings</button> */}\n//                   {messageResponse && <div>\n//                       <h2>Message Response:</h2>\n//                       <pre>{JSON.stringify(messageResponse, null, 2)}</pre>\n//                   </div>}\n//                   {resultOutput && <div>\n//                       <h2>Result Output:</h2>\n//                       <pre>{JSON.stringify(resultOutput, null, 2)}</pre>\n//                   </div>}\n//                   {/* {embeddingsOutput && <div>\n//                       <h2>Embeddings Output:</h2>\n//                       <pre>{embeddingsOutput}</pre>\n//                   </div>} */}\n//               </>\n//           )}\n//       </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// Consider importing a UI framework here\nimport Button from '@material-ui/core/Button'; // Example for Material-UI\nimport TextField from '@material-ui/core/TextField'; // For the input field\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n  const [messageResponse, setMessageResponse] = useState(null);\n  const [resultOutput, setResultOutput] = useState(null);\n  const [textInput, setTextInput] = useState(''); // Re-introduced for input field usage\n\n  useEffect(() => {\n    setIsArConnectAvailable(!!window.arweaveWallet);\n  }, []);\n  const handleTextInputChange = event => {\n    setTextInput(event.target.value);\n  };\n\n  // Adjust sendMessage to use textInput\n  const sendMessage = async () => {\n    if (!isArConnectAvailable) {\n      alert('Please install ArConnect.');\n      return;\n    }\n    try {\n      const response = await message({\n        process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvi\",\n        tags: [{\n          name: \"Action\",\n          value: \"GetEmbedding_Proto\"\n        }, {\n          name: \"Input\",\n          value: textInput\n        } // Now using textInput\n        ],\n        signer: createDataItemSigner(window.arweaveWallet)\n      });\n      console.log(\"Message response:\", response);\n      setMessageResponse(response);\n      fetchResult(response);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [!isArConnectAvailable && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please install ArConnect to use this app.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 37\n    }, this), isArConnectAvailable && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: connectToArConnect,\n        children: \"Connect to ArConnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Enter your message\",\n        variant: \"outlined\",\n        value: textInput,\n        onChange: handleTextInputChange,\n        fullWidth: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }, this), messageResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Message Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(messageResponse, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 39\n      }, this), resultOutput && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Result Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(resultOutput, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"KrGlIxxjUN9GwTqW82+Cph9Z8b4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","message","result","createDataItemSigner","Button","TextField","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isArConnectAvailable","setIsArConnectAvailable","messageResponse","setMessageResponse","resultOutput","setResultOutput","textInput","setTextInput","window","arweaveWallet","handleTextInputChange","event","target","value","sendMessage","alert","response","process","tags","name","signer","console","log","fetchResult","error","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","onClick","connectToArConnect","label","onChange","fullWidth","margin","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/chim/arweave_website_proto/ao_embedder_proto/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// // import generateEmbeddings from './generateEmbeddings';\n// // import * as tf from '@tensorflow/tfjs';\n// // import * as use from '@tensorflow-models/universal-sentence-encoder';\n\n// function App() {\n//     const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n//     const [messageResponse, setMessageResponse] = useState(null); // To store the response from sendMessage\n//     const [resultOutput, setResultOutput] = useState(null); // To store the result of fetching the result\n//     // const [textInput, setTextInput] = useState(''); // State to store text input\n//     // const [embeddingsOutput, setEmbeddingsOutput] = useState(null); \n\n    \n//     useEffect(() => {\n//         // Check if ArConnect is available in the window context\n//         setIsArConnectAvailable(!!window.arweaveWallet);\n//     }, []);\n\n//     const connectToArConnect = async () => {\n//         try {\n//             // Requesting permissions from ArConnect; adjust permissions as needed\n//             await window.arweaveWallet.connect(['ACCESS_ADDRESS', 'SIGN_TRANSACTION']);\n//             console.log('Connected to ArConnect.');\n//         } catch (error) {\n//             console.error('Error connecting to ArConnect:', error);\n//         }\n//     };\n\n//     const sendMessage = async () => {\n//         if (!isArConnectAvailable) {\n//             alert('Please install ArConnect.');\n//             return;\n//         }\n\n//         try {\n//             const response = await message({\n//                 process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n//                 tags: [\n//                     { name: \"Action\", value: \"GetEmbedding_Proto\" },\n//                     { name: \"Input\", value: \"difficult feature overall. joining communities. leadership values.\"}\n//                     // Additional tags as needed\n//                 ],\n//                 signer: createDataItemSigner(window.arweaveWallet)\n//             });\n\n//             console.log(\"Message response:\", response);\n//             setMessageResponse(response); // Store the response for displaying\n//             fetchResult(response); // Assuming the response contains an id, use it to fetch results\n//         } catch (error) {\n//             console.error(\"Error sending message:\", error);\n//         }\n//     };\n\n//     const fetchResult = async (messageId) => {\n//         try {\n//           let { Messages, Spawns, Output, Error } = await result({\n//               message: messageId, // Use the messageId from sendMessage response\n//               process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvik\",\n//           });\n//             console.log(\"Result data:\", { Messages, Spawns, Output, Error });\n//             setResultOutput(Messages[0].Data); // Store the result data for displaying\n//         } catch (error) {\n//             console.error(\"Error fetching result:\", error);\n//         }\n//     };\n\n//     // Function to handle text input changes\n//     // const handleTextInputChange = (event) => {\n//     //     setTextInput(event.target.value);\n//     // };\n\n//     // // Function to convert text to embeddings and set the output\n//     // const convertTextToEmbeddings = async () => {\n//     //     const model = await use.load();\n//     //     const embeddings = await model.embed([textInput]);\n//     //     const embeddingsArray = await embeddings.array();\n//     //     const embeddingsJSON = JSON.stringify(embeddingsArray);\n//     //     setEmbeddingsOutput(embeddingsJSON);\n//     // };\n\n//     return (\n//       <div>\n//           {!isArConnectAvailable && <p>Please install ArConnect to use this app.</p>}\n//           {isArConnectAvailable && (\n//               <>\n//                   <button onClick={connectToArConnect}>Connect to ArConnect</button>\n//                   <button onClick={sendMessage}>Send Message</button>\n//                   {/* <input type=\"text\" value={textInput} onChange={handleTextInputChange} placeholder=\"Enter text here\" /> */}\n//                   {/* <button onClick={convertTextToEmbeddings}>Convert Text to Embeddings</button> */}\n//                   {messageResponse && <div>\n//                       <h2>Message Response:</h2>\n//                       <pre>{JSON.stringify(messageResponse, null, 2)}</pre>\n//                   </div>}\n//                   {resultOutput && <div>\n//                       <h2>Result Output:</h2>\n//                       <pre>{JSON.stringify(resultOutput, null, 2)}</pre>\n//                   </div>}\n//                   {/* {embeddingsOutput && <div>\n//                       <h2>Embeddings Output:</h2>\n//                       <pre>{embeddingsOutput}</pre>\n//                   </div>} */}\n//               </>\n//           )}\n//       </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport { message, result, createDataItemSigner } from '@permaweb/aoconnect';\n// Consider importing a UI framework here\nimport Button from '@material-ui/core/Button'; // Example for Material-UI\nimport TextField from '@material-ui/core/TextField'; // For the input field\n\nfunction App() {\n    const [isArConnectAvailable, setIsArConnectAvailable] = useState(false);\n    const [messageResponse, setMessageResponse] = useState(null);\n    const [resultOutput, setResultOutput] = useState(null);\n    const [textInput, setTextInput] = useState(''); // Re-introduced for input field usage\n\n    useEffect(() => {\n        setIsArConnectAvailable(!!window.arweaveWallet);\n    }, []);\n\n    const handleTextInputChange = (event) => {\n        setTextInput(event.target.value);\n    };\n\n    // Adjust sendMessage to use textInput\n    const sendMessage = async () => {\n        if (!isArConnectAvailable) {\n            alert('Please install ArConnect.');\n            return;\n        }\n\n        try {\n            const response = await message({\n                process: \"XZllrzvpGSz52qQnmA_H-3q6OEz-jAl7-AfV0ZGRvi\",\n                tags: [\n                    { name: \"Action\", value: \"GetEmbedding_Proto\" },\n                    { name: \"Input\", value: textInput } // Now using textInput\n                ],\n                signer: createDataItemSigner(window.arweaveWallet)\n            });\n\n            console.log(\"Message response:\", response);\n            setMessageResponse(response);\n            fetchResult(response);\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n        }\n    };\n\n    return (\n      <div style={{ padding: '20px' }}>\n          {!isArConnectAvailable && <p>Please install ArConnect to use this app.</p>}\n          {isArConnectAvailable && (\n              <>\n                  <Button variant=\"contained\" color=\"primary\" onClick={connectToArConnect}>Connect to ArConnect</Button>\n                  <TextField\n                    label=\"Enter your message\"\n                    variant=\"outlined\"\n                    value={textInput}\n                    onChange={handleTextInputChange}\n                    fullWidth\n                    margin=\"normal\"\n                  />\n                  <Button variant=\"contained\" color=\"secondary\" onClick={sendMessage}>Send Message</Button>\n                  {messageResponse && <div>\n                      <h2>Message Response:</h2>\n                      <pre>{JSON.stringify(messageResponse, null, 2)}</pre>\n                  </div>}\n                  {resultOutput && <div>\n                      <h2>Result Output:</h2>\n                      <pre>{JSON.stringify(resultOutput, null, 2)}</pre>\n                  </div>}\n              </>\n          )}\n      </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}